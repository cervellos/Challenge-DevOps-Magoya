name: CI/CD Pipeline

on:
  workflow_dispatch:
  #  push:
#    branches:
#      - feature
  #  pull_request:
#    branches:
#      - feature
env:
  AWS_REGION: sa-east-1
  PREFIX: demo-nero
  SERVICE: poc

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with: 
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -r cat-app/requirements.txt
      
      #      - name: Run tests
        #        run: |
#          python -m unittest discover -s tests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: Github-repo
          role-to-assume: ${{secrets.AWS_ROLE}}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        env:
          IMAGE_TAG: latest
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PREFIX }}/${{ env.SERVICE }}
        run: |
          docker build --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f cat-app/Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: Github-repo
          role-to-assume: ${{secrets.AWS_ROLE}}
          aws-region: ${{ env.AWS_REGION }}

      - uses: tale/kubectl-action@v1
        with:
         base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: kubectl get pods
          #          args: apply -f k8s/service.yaml
